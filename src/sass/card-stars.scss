@use 'sass:color';
@use 'variables-and-mixins' as *;

@keyframes spin {
	100% {
		transform: rotate(360deg);
	}
}

.card-star {
	position: absolute;
	top: 0;
	bottom: 0;
	left: -$lhse*.9167;
	width: $width-card-star;
	border-radius: $border-radius-button;
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
	cursor: pointer;
	display: flex;
	align-items: center;

	&:hover,
	&:focus-within,
	&:active {
		background: $color-group-bg-lighter;
		box-shadow: $box-shadow-card-list-row-bg-edge;
	}
	&:hover {
		&:not(:focus-within) {
			input {
				&:checked {
					+ svg {
						animation: spin 2s linear;
						transition: $transition-duration-standard ease;
						transition-property: opacity, fill, filter; // Exclude "transform" as a transition property while keeping the other properties. This is needed for Safari, because apparently `transition` and `animation` clash with each other on that browser when they both affect the same property, `transform` in this case.
					}
				}
				&:not(:checked) {
					+ svg {
						opacity: .5;
						filter: saturate(.5);
						transition-duration: 0;
					}
				}
			}
		}
	}
	&:active,
	&.flash {
		input {
			&:checked {
				+ svg {
					transform: scale(1.3333);
					z-index: 2;
					transition-delay: 0s !important;
					transition-duration: 0s !important;
				}
			}
			&:not(:checked) {
				+ svg {
					transition-delay: 0s !important;
					transform: scale(.75);
				}
			}
		}
	}
	input {
		position: absolute;
		right: $lhse*.625;
		width: $lhse;
		height: 100%;
		padding: 0;
		border: 0;
		box-shadow: none;
		background: none !important;

		&:checked {
			background: none;

			+ svg {
				opacity: 1;
			}
		}
		&:not(:checked) {
			+ svg {
				transition-delay: 0s;
				transition-duration: $transition-duration-standard*2;
			}
		}
		&::after {
			content: none;
			display: none;
		}
		+ svg {
			opacity: 0;
			fill: $color-card-star;
			width: $lhse*.9167;
			height: $lhse*.9167;
			position: relative;
			left: 0;
			transition: $transition-duration-standard ease;
			transition-property: opacity, fill, transform, filter;
			z-index: 1;
		}
	}
}
.card-list-section {
	li {
		&:hover,
		&:focus-within,
		&.highlight {
			.card-star {
				&:hover,
				&:focus-within {
					input {
						+ svg {
							transition-duration: $transition-duration-standard !important;
							transition-delay: 0s !important;
						}
					}
				}
				&:not(:hover),
				&:not(:focus-within) {
					input {
						&:not(:checked) {
							+ svg {
								transition: opacity 2s ease;
								transition-delay: 1s;
							}
						}
					}
				}
			}
			.card-star {
				input {
					&:checked {
						+ svg {
							opacity: 1;
							fill: color.adjust($color-card-star, $lightness: 16.67%);
							filter: drop-shadow(0 0 $lhse*.125 $color-mythic-yellow);
							transition-delay: 0s;
							transition-duration: $transition-duration-standard;
						}
					}
					+ svg {
						@include disabled-style;
					}
				}
				&:not(:hover),
				&:not(:focus-within) {
					input {
						&:checked {
							+ svg {
								transition-delay: 0s;
								transition-duration: $transition-duration-standard;
							}
						}
					}
				}
			}
		}
		&.highlight {
			.card-star {
				outline: $outline-keyboard-focus;

				&.flash {
					background: $color-input-bg-active;
					outline-color: $color-link-focus;

					input {
						&:not(:checked) {
							+ svg {
								opacity: 0;
								transition-delay: 0s;
								transition-duration: $transition-duration-standard;
							}
						}
					}
				}
			}
		}
	}
}

@media (pointer: coarse) {
	.card-star {
		&:hover {
			&:not(:focus-within) {
				input {
					&:checked {
						+ svg {
							animation: none;
						}
					}
				}
			}
		}
	}
}
